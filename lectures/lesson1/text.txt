Сделано в Whisper AI
Обработка изображений с использованием Python и OpenCV
Чистая версия. Дата создания: ⁨08.09.2025⁩
Вот он с изображениями. Подозреваю, нету. Ну то есть, я думаю, у нас у всех более-менее есть понимание, что это вот некая матричка, которая описывает яркости пикселей. То есть зачастую это примерно как-то так. Иногда там есть какие-то каналы, иногда каналов нет, иногда одноканальная, иногда каналов больше, чем привычных нам трех, больше чем три, к которым все привыкли, иногда четыре, какой-нибудь канал прозрачности. Мы все это дело будем, может быть, периодически упоминать. Если там кому-то непонятно будет, вы меня тормозите, будем вместе пытаться разбираться. Опять же, с питоном, думаю, тоже уже в магистратуре все наработались, все должны тоже в нем ориентироваться, какие-то базовые библиотеки. Думаю, у нас очень много будет в библиотеке OpenCV, потому что там довольно много решений написано. Будет всякий T-Image, это тоже такой пакет. Ptonovsky, популярный для такой уже чуть более продвинутой работы с изображениями. На самом деле в OpenCV практически все есть. Некоторых методов там нету, потому что они какие-нибудь платные, проприетарные и все такое. Что-то там сами попишем. что-то будем готовы использовать что-то попишем а потом будем готовы использовать то есть какой-то такой подход ну и давайте да к делу то есть в целом все как обычно если в питоне что-то делали с данными с матрицами и так далее нам пай пандас нам сегодня по особо не понадобится но я его тут на всякий случай скопом беру но библиотека opencv ну айпай там для отрисовки и сайки ты мы что же здесь общем избыточно натянута библиотек и будем экспериментировать совсем по чуть-чуть опять же это тоже обработка чтобы нам отнормализовать точнее здесь да мы его нормализуем и приводим в int-овое отображение но опять же давайте начнем что-нибудь импортнем просто посмотрим что вообще изображение себя представляет чего нам с ним можно поделать самым простым способом что оно вообще себя представляет как вот набор данных В основном мы на наших занятиях будем что-нибудь тянуть либо с интернета, либо у нас тут тоже какие-то готовые картиночки лежат, будем с ними экспериментировать. Ноутбуки эти, опять же, я вам все буду отдавать. Как правило, они в большинстве своем не требуют ничего, кроме самого ноутбука. Более того, если вы будете запускать это где-то в коллабе, то даже, наверное, и библиотек никаких дополнительно ставить не придется, потому что там все это, по-моему, уже установлено заведомо. В этом плане да, максимально удобно. Ну и опять же, есть ноутбук, скидываю после занятия, там по-хорошему в течение недельки посмотреть, закрепить, что-нибудь с вами погонять, поменять. У вас это крайне приветствуется. Ну более того, вы потом с этим же примерно будете работать в лабораторных. То есть просто пощупать руками на своих примерах. Ну окей, к концу. Для того, чтобы нам чего-то подтянуть из интернета, можно, конечно, какие-то сторонние библиотеки, но вот в SecondLearn есть, в общем-то, возможность прочитать из URL, поэтому тоже вот как вариант предлагаю так пользоваться. Просто проходим по URL, грузим их, можем отрисовать, посмотреть. Тут, я даже думаю, смысла останавливаться нет, это... вряд ли сильно пугает как загрузить изображение как его взять как поработать давайте теперь вообще посмотрим что у нас из себя представляет изображение какие там слои китам циферки что это вообще себя представляет как правило все там вся обработка изображений и большинство изображений они хранятся Ну, опять же, это там, не уходя в какие-то особенные форматы, это, как правило, три канала. Красный, зеленый, синий, где описана яркость каждого пикселя. То есть давайте мы с вами тут... Я, кстати, не помню, он тут каналы вырежет? По-моему, вырежет. То есть мы можем... Давайте сначала выведем, как вообще наш этот тензор выглядит. То есть myImage... Какой-нибудь shape... Это у нас 480 пикселей по высоте, по ширине, и в каждой этой точке три канала описаны по яркостям. Можно посмотреть тип данных, в котором хранится это. Беззнаковый, целочисленный, 8-битный тип данных. Тут тоже, думаю, вам все это понятно. Соответственно, мы чаще всего будем работать... на первых парах с одним каналом, но на самом деле это экстраполируется на три канала абсолютно так же. Просто это итеративно, канал за каналом можем обработать. Ну, либо там есть методы, которые используют все каналы. Окей, грузили, посмотрели. Ну вот тут можно увидеть, понятно, что это так себе, конечно. в плане воспринятия. Ну вот у нас условно первая тройка. Яркость красного канала, яркость синего канала, яркость зеленого канала. Ну там говоря об особенностях библиотеки OpenCV, у них каналы иногда задом наперед. То есть сначала RGB Blue, синий канал, потом зеленый, потом красный. Ну не принципиально, можно каждый раз посмотреть, убедиться. В общем перевернуть, если надо, это тоже довольно просто делается. Еще раз убедимся, что это обычный нам пай-аррей. Максимально-минимальные значения, опять же, можем посмотреть. 255 – это, в общем-то, в нашем беззнаковом инте самое большое возможное число. То есть, это максимальная яркость пикселя. 0 – минимальная яркость пикселя. Что у нас в наших картах цветовых? 255 – это абсолютно белое значение. 0 – абсолютно черное. Но, опять же, средний размер. Все это мы уже с вами посмотрели. Так, здесь я не помню, почему-то я его сохраняю, но пусть сохраняется. Тоже еще из таких рабочих операций периодически нам, особенно если мы... Ну, мы сейчас, конечно, с нейросетями работать не будем, но часто там определенный порядок каналов нужен для подачи в наши методы, в модели и так далее. Часто требуется, например, отдельно... То есть у нас сейчас получается, это как бы матрица троек, да? А так мы... Для каких-то из методов нам может понадобиться тройка матриц. То есть сходное у нас изображение. Это вот те самые матрицы, в которых в каждой вот этой ячейке стоит тройка из int восьмых. Если нам нужно вывернуть по каким-то причинам, мы это будем периодически делать. В том числе для отрисовки или для методов. Это может пригождаться. Здесь давайте тоже выведем, чтобы убедиться, что это вот собственно... Ну, на самом деле, вот эта вот матрица размером 480 на 480, это их три штуки По скобочкам можно заморочиться увидеть Ну ладно, окей, это тоже такие технические вещи, они нам сейчас, наверное, не сильно важны С чего убедиться, посмотреть, прогнать, это можно будет Плюс, опять же, удобнее потом получать доступ к каналам вот в этом случае То есть я здесь могу просто взять первый канал, и все, и у меня матрица не с тройками уже, а с яркостью каждого пикселя Окей, давайте потихонечку переходить вообще к тому, как мы можем посмотреть на изображение с точки зрения в некоторой степени статистической, просто какие-то описательные, какие-то такие интегральные оценки дать изображениям. Ну и первое, что самое такое простое, это контраст, гистограммы. Ну и есть там методы оценок изображений как раз-таки на базе гистограмм и контрастов. Давайте, собственно... подгрузим убедимся что он все еще та же кошка самый простой способ получить гистограмму мы просто в общем то вытягиваем все наши яркости в одну цепочку и в общем то просто смотрим сколько каких представителей какой яркости у нас есть тем более что у нас как бы с вами изображение оно в int'ах то есть тут проблем нет то есть у нас представители из 256 значений их какое-то количество сколько-то ноликов сколько-то там соточек сколько-то двухсоточек и так далее ну вот это собственно гистограмма нашего кота она как раз таки нам просто тупо описывает вот у нас с яркостью 0 что-то там под 2000 с яркостью 100 у нас порядка 5000 пикселей Самая такая базовая вещь, просто можно увидеть что-то из этого, что да, у нас вот здесь изображение очень ярких участков маловато, много участков такой средней яркости и совсем темной тоже маловато. Это нам там может говорить о каком-то недостаточном контрасте или наоборот о переизбыточном контрасте. Опять же это мы с вами пощупаем, посмотрим, будем редактировать, опираясь на гистограммы наши изображения. Пока это для нас просто какой-то показатель, чтобы увидеть самим, понять вообще, с чем мы имеем дело Как-то, скажем так, посмотреть на изображение с другого ракурса Окей, сейчас вспомню, что я здесь хотел Здесь, наверное, про каналы Ну да, более того, здесь у нас гистограмма построена по всем трём каналам, всё свалено в кучу Иногда нам интереснее посмотреть в каждом канале, что происходит Какие яркости в красном, в зелёном, в синем Ну, в общем-то, посмотрим. Вот, пожалуйста, тоже тут простенький скриптик написан. По-моему, даже есть какой-то готовый под это дело. Ну, здесь, в общем, просто в один график отрисовываются все три. То есть у нас в синем канале следующим образом представлены яркости. То есть, да, он где-то там стухает условно ниже. Ну, скорее всего, это проблема именно самого изображения, какой-то немножко дисбаланс. Ну, по красным, по зеленым логично можем построить, посмотреть. Так. Так, ну опять же тоже из технических таких штук нам иногда надо будет сконвертировать наше цветное изображение в изображение черно-белое. С помощью OpenCV можно это легко сделать. Можно, конечно, это сделать вручную, просто взяв там условно каждый канал, и, конечно, это будет очень удобно. просуммировав и поделив на три. То есть мы берем вот эту тройку яркостей в канале, суммируем и делим на три. Но так не совсем правильно, там немножко другое правило этого деления существует. То есть не все цвета в черно-белый вот так вот просто усреднить можно. Иногда это хитрее делается. Но никто не запрещает. Проще всего взять готовый метод, который позволяет конвертировать цвета в библиотеке OpenCV. Ну как вы видите BGR to gray, то есть blue, green, red. Это по умолчанию, в OpenCV по умолчанию такой порядок каналов. Когда мы прочитали это библиотеко изображения, ну давайте тут какой-нибудь, что мы там, имидж, да, берем CV. Ну вот он мне даже что-то подсказывает уже. Display image он мне выведет. Вот так вот в наглую. Ну окей, прочитал все вроде правильно. все это не то изображение ладно вернем как было так сейчас у меня пишет зум что 10 минут перезапустим ся давайте да вернем дело у нас тут загружалась я уже потерял ну в общем то да получили кота черно-белого дальше тут можем работать с черно-белым изображением но на самом деле это это мало чем отличается от работы с тремя каналами, это мы сейчас там для удобства делаем и для в целом более удобной работы именно нашими методами более очевидные примеры получатся из этого ну окей, самое простое, мы можем просто там условно давать отсечку по какому-то по какой-то яркости пикселей тоже стандартный метод, можно ручками написать, то есть если какой-то там пиксель ярче в данном случае значение 120, то мы его закрашиваем в белый цвет. Если яркость в нашем изображении меньше порога, она становится черной. Это бинаризация так называемая. Иногда так это обзывают, иногда еще как-то. То есть мы можем просто по какому-то порогу что-то сделать с изображением. Это нам позволяет выделить на каких-то снимках что-нибудь нас интересующее по какой-то границе. Это иногда в каких-то, тоже, скажем так, это относится к каким-то методам обработки изображений, понятно, оно такое самое простое, лобовое, тупое, но вот, в общем-то, можно как-то с этим тоже работать. Окей, здесь гистограмма серого изображения, которое у нас слито из трех, тоже, в общем-то, так, чисто для ознакомления. Здесь можно посмотреть, какое было цветное черно-белое. Здесь бы неплохо вывести было обе кистограммы. Так вот по-простому. Не помню, получится ли. Скорее всего, надо будет нормализовать. Ладно, быстрым способом, наверное, не получится. Хотя нет. Ну да, единственное, они не отнормализованы. Окей. Так, ну все, мы посмотрели, черно-белое получили. Давайте теперь начнем уже с ним работать дальше. сейчас что здесь хотел я уже папу ванна это какой-то был сторонний пример чего-то там до нажали давайте да на самом деле с черно-белыми конечно еще и прочее работать потому что ну один канал в плане нам по я с такими вещами вообще легко работать это просто по сути матрица ширины шириной на высоту что стоит как бы ширине и высоте изображения строки и стоп ци и Ну, самое простое, мы можем получить негатив от изображения. Просто берем максимальную яркость из него, читаем само изображение, пожалуйста, негатив получили. То есть у нас самое темное стало самым светлым, самое светлое стало самым темным. Каких-то там обработки снимков сплошь и рядом. Иногда это более хитрые методы, иногда они нелинейные какие-то. Но вот мы это с вами уже на следующем занятии пощупаем, как нелинейно можно попреобразовывать изображение. Ну, и вот, как я уже говорил, Теперь давайте уже к интегральным показателям. Мы с вами на эти все инструменты посмотрели, какие они есть. Инстаграммы, какие-то средние значения. Какие-то локальные яркости мы с вами не смотрели, но посмотрим попозже. Давайте самый простой пример. У нас есть сходное изображение, и мы его немножечко подпортим. Немножечко сместим его контрастность. Потом посмотрим, как это числами определить. Тут самое очевидное, первое изображение, темные места действительно темные, светлые места действительно светлые. Это хорошо контрастированное изображение. Здесь мы специально понизили яркость всех пикселей на 2 и сместили на 50. Тем самым мы самое темное место сделали светлее, чем оно является, а самое светлое оно тоже смещено из-за того, что мы поделили это на 2. На картинке это тоже уже видно. Нравится, не нравится. Чисто для восприятия человека это такой дискуссионный момент. Но, например, если это какие-то снимки, спутниковые снимки и так далее, то у нас в меньшем динамическом диапазоне изображения, то есть в том диапазоне, где можно было описать больше градаций этого цвета, описано меньше. То есть мы зажали... на числа посмотрим то есть имидж возьмем который оригинальный не поломаны какой-то максимально его значение давайте минимальная средняя это какой-то вот самое яркое место было 255 самая темная было 0 ну среднего кей какой-то было то есть у нас в нашем изображении закодированы собственно вот все 255 градации вот этих цветов если мы возьмем Сейчас оно же 2, да, называется, да. Наша намеренно подпорченная, то у нас самое яркое место 77, самое темное 50. То есть здесь использовано, ну вот сколько там, 127 градаций цвета. То есть мы половину информации как бы где-то растеряли. Понятно, что ее восстановить по-честному-то не получится, да, ну там может какие-то... Может нейросетевые методы, которые пытаются это как-то правдоподобно имитировать Можно просто усреднив вот эти промежуточные значения Но на самом деле, если мы вот так погоняем туда-сюда по яркостям То мы потом увидим такой эффект лесенки По-моему, он у нас там тоже дальше будет Когда мы условно из сжатого изображения пытаемся восстановить исходное Мы это заметим Или давайте можем даже на самом деле попробовать Давайте как-то посильнее испорчим имидж просто три там по моему занято как-то вот прям их на 4 разделим еще на 100 сдвинем сконкатенировать это дело сюда ну как видим вообще она так себе если мы сейчас с вами сделаем обратную процедуру то есть сдвинем назад на 100 так да сделаем минус 100 и умножим на 4 мы с вами увидим что много чего растеряется На самом деле не так, что прям совсем плохо, но тут на самом деле больше появилось всяких... Давайте я его еще сильнее испорчу. Давайте на 8 прям вот так. Ну да, вот видите, тут прям уже такие артефакты начинают появляться, сильнее начинают ломаться стенки и так далее. Понятно, что это... Давайте прям совсем усугубим, как-нибудь 16 прям, чтобы сильно было заметно. Ну вот тут вообще сильно видно, да? То есть мы специально его сильно зажали, потом из зажатого пытались восстановить, ну и вот все это полезло. Ну это то есть те места, где градации цветов у нас растерялись. Ну и, соответственно, поэтому нам неплохо бы использовать весь наш возможный динамический диапазон изображения при его получении еще, конечно. Ну вот надо понимать, как это иногда может происходить, что пережатие, оно потом не восстанавливается. Окей, ладно, это я так в сторону чуть-чуть ушел. Ну и просто увидеть это буквально на графике можно. То есть вот у нас изображение, которое по контрасту нормально себя ведет. То есть у нас весь динамический диапазон используется, и то, которое мы специально с вами зарезали. Еще тут можем сюда ради интереса сунуть сильно порезанное наше изображение. Так.
